"""All input for the create `Facility` mutation."""
input CreateFacilityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Facility` to be created by this mutation."""
  facility: FacilityInput!
}

"""The output of our create `Facility` mutation."""
type CreateFacilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Facility` that was created by this mutation."""
  facility: Facility

  """An edge for our `Facility`. May be used by Relay 1."""
  facilityEdge(
    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesEdge

  """Reads a single `Organization` that is related to this `Facility`."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Organization` mutation."""
input CreateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Organization` to be created by this mutation."""
  organization: OrganizationInput!
}

"""The output of our create `Organization` mutation."""
type CreateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was created by this mutation."""
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteFacilityByNodeId` mutation."""
input DeleteFacilityByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Facility` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFacilityBySlug` mutation."""
input DeleteFacilityBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The facility’s slug."""
  slug: String!
}

"""All input for the `deleteFacility` mutation."""
input DeleteFacilityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary unique identifier for the facility."""
  id: Int!
}

"""The output of our delete `Facility` mutation."""
type DeleteFacilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFacilityNodeId: ID

  """The `Facility` that was deleted by this mutation."""
  facility: Facility

  """An edge for our `Facility`. May be used by Relay 1."""
  facilityEdge(
    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesEdge

  """Reads a single `Organization` that is related to this `Facility`."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteOrganizationByNodeId` mutation."""
input DeleteOrganizationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organization` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteOrganizationBySlug` mutation."""
input DeleteOrganizationBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The org’s slug."""
  slug: String!
}

"""All input for the `deleteOrganization` mutation."""
input DeleteOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary unique identifier for the org."""
  id: Int!
}

"""The output of our delete `Organization` mutation."""
type DeleteOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOrganizationNodeId: ID

  """The `Organization` that was deleted by this mutation."""
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A connection to a list of `Facility` values."""
type FacilitiesConnection {
  """
  A list of edges which contains the `Facility` and cursor to aid in pagination.
  """
  edges: [FacilitiesEdge!]!

  """A list of `Facility` objects."""
  nodes: [Facility!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Facility` you could get from the connection."""
  totalCount: Int!
}

"""A `Facility` edge in the connection."""
type FacilitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Facility` at the end of the edge."""
  node: Facility!
}

"""Methods to use when ordering `Facility`."""
enum FacilitiesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""A facility."""
type Facility implements Node {
  """The time this facility was created."""
  createdAt: Datetime

  """The primary unique identifier for the facility."""
  id: Int!

  """The facility’s name."""
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Organization` that is related to this `Facility`."""
  organization: Organization

  """The facility’s associated organization."""
  organizationId: Int!

  """The facility’s slug."""
  slug: String!

  """The time this facility was updated."""
  updatedAt: Datetime
}

"""
A condition to be used against `Facility` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FacilityCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: Int

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Facility`"""
input FacilityInput {
  """The time this facility was created."""
  createdAt: Datetime

  """The primary unique identifier for the facility."""
  id: Int

  """The facility’s name."""
  name: String!

  """The facility’s associated organization."""
  organizationId: Int!

  """The facility’s slug."""
  slug: String!

  """The time this facility was updated."""
  updatedAt: Datetime
}

"""
Represents an update to a `Facility`. Fields that are set will be updated.
"""
input FacilityPatch {
  """The time this facility was created."""
  createdAt: Datetime

  """The primary unique identifier for the facility."""
  id: Int

  """The facility’s name."""
  name: String

  """The facility’s associated organization."""
  organizationId: Int

  """The facility’s slug."""
  slug: String

  """The time this facility was updated."""
  updatedAt: Datetime
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Facility`."""
  createFacility(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFacilityInput!
  ): CreateFacilityPayload

  """Creates a single `Organization`."""
  createOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload

  """Deletes a single `Facility` using a unique key."""
  deleteFacility(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFacilityInput!
  ): DeleteFacilityPayload

  """Deletes a single `Facility` using its globally unique id."""
  deleteFacilityByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFacilityByNodeIdInput!
  ): DeleteFacilityPayload

  """Deletes a single `Facility` using a unique key."""
  deleteFacilityBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFacilityBySlugInput!
  ): DeleteFacilityPayload

  """Deletes a single `Organization` using a unique key."""
  deleteOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInput!
  ): DeleteOrganizationPayload

  """Deletes a single `Organization` using its globally unique id."""
  deleteOrganizationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationByNodeIdInput!
  ): DeleteOrganizationPayload

  """Deletes a single `Organization` using a unique key."""
  deleteOrganizationBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationBySlugInput!
  ): DeleteOrganizationPayload

  """Updates a single `Facility` using a unique key and a patch."""
  updateFacility(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFacilityInput!
  ): UpdateFacilityPayload

  """Updates a single `Facility` using its globally unique id and a patch."""
  updateFacilityByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFacilityByNodeIdInput!
  ): UpdateFacilityPayload

  """Updates a single `Facility` using a unique key and a patch."""
  updateFacilityBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFacilityBySlugInput!
  ): UpdateFacilityPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInput!
  ): UpdateOrganizationPayload

  """
  Updates a single `Organization` using its globally unique id and a patch.
  """
  updateOrganizationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationByNodeIdInput!
  ): UpdateOrganizationPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganizationBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationBySlugInput!
  ): UpdateOrganizationPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""An organization."""
type Organization implements Node {
  """The time this org was created."""
  createdAt: Datetime

  """Reads and enables pagination through a set of `Facility`."""
  facilities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesConnection!

  """The primary unique identifier for the org."""
  id: Int!

  """The org’s name."""
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """The org’s slug."""
  slug: String!

  """The time this org was updated."""
  updatedAt: Datetime
}

"""
A condition to be used against `Organization` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Organization`"""
input OrganizationInput {
  """The time this org was created."""
  createdAt: Datetime

  """The primary unique identifier for the org."""
  id: Int

  """The org’s name."""
  name: String!

  """The org’s slug."""
  slug: String!

  """The time this org was updated."""
  updatedAt: Datetime
}

"""
Represents an update to a `Organization`. Fields that are set will be updated.
"""
input OrganizationPatch {
  """The time this org was created."""
  createdAt: Datetime

  """The primary unique identifier for the org."""
  id: Int

  """The org’s name."""
  name: String

  """The org’s slug."""
  slug: String

  """The time this org was updated."""
  updatedAt: Datetime
}

"""A connection to a list of `Organization` values."""
type OrganizationsConnection {
  """
  A list of edges which contains the `Organization` and cursor to aid in pagination.
  """
  edges: [OrganizationsEdge!]!

  """A list of `Organization` objects."""
  nodes: [Organization!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organization` you could get from the connection."""
  totalCount: Int!
}

"""A `Organization` edge in the connection."""
type OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organization` at the end of the edge."""
  node: Organization!
}

"""Methods to use when ordering `Organization`."""
enum OrganizationsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of `Facility`."""
  facilities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesConnection
  facility(id: Int!): Facility

  """Reads a single `Facility` using its globally unique `ID`."""
  facilityByNodeId(
    """The globally unique `ID` to be used in selecting a single `Facility`."""
    nodeId: ID!
  ): Facility
  facilityBySlug(slug: String!): Facility

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!
  organization(id: Int!): Organization

  """Reads a single `Organization` using its globally unique `ID`."""
  organizationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Organization`.
    """
    nodeId: ID!
  ): Organization
  organizationBySlug(slug: String!): Organization

  """Reads and enables pagination through a set of `Organization`."""
  organizations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

"""All input for the `updateFacilityByNodeId` mutation."""
input UpdateFacilityByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Facility` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Facility` being updated.
  """
  patch: FacilityPatch!
}

"""All input for the `updateFacilityBySlug` mutation."""
input UpdateFacilityBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Facility` being updated.
  """
  patch: FacilityPatch!

  """The facility’s slug."""
  slug: String!
}

"""All input for the `updateFacility` mutation."""
input UpdateFacilityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary unique identifier for the facility."""
  id: Int!

  """
  An object where the defined keys will be set on the `Facility` being updated.
  """
  patch: FacilityPatch!
}

"""The output of our update `Facility` mutation."""
type UpdateFacilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Facility` that was updated by this mutation."""
  facility: Facility

  """An edge for our `Facility`. May be used by Relay 1."""
  facilityEdge(
    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesEdge

  """Reads a single `Organization` that is related to this `Facility`."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateOrganizationByNodeId` mutation."""
input UpdateOrganizationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organization` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
}

"""All input for the `updateOrganizationBySlug` mutation."""
input UpdateOrganizationBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!

  """The org’s slug."""
  slug: String!
}

"""All input for the `updateOrganization` mutation."""
input UpdateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary unique identifier for the org."""
  id: Int!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
}

"""The output of our update `Organization` mutation."""
type UpdateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was updated by this mutation."""
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}
